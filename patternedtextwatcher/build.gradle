apply plugin: 'com.android.library'
apply from: '../jacoco.gradle'

android {
  compileSdkVersion 24
  buildToolsVersion "24.0.2"

  defaultConfig {
    minSdkVersion 9
    targetSdkVersion 24

    testInstrumentationRunner 'com.szagurskii.patternedtextwatcher.utils.RxBindingTestRunner'
  }
  buildTypes {
    debug {
      testCoverageEnabled true
    }
  }
  lintOptions {
    disable 'MissingPermission'
  }
  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
      testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        exceptionFormat 'full'
      }
    }
  }
}

task jacocoCustomTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {
  group = "Reporting"
  description = "Generate Jacoco coverage reports"

  // Exclude classes that are meaningless to test.
  def fileFilter = [
      '**/BuildConfig.class',
      '**/LogUtils.class',
      '**/CccFormatTextWatcher.class',
      '**/StringUtils.class'
  ]

  def debugTree = fileTree(
      dir: "${project.buildDir}/intermediates/classes/debug",
      excludes: fileFilter
  )

  def mainSrc = "${project.projectDir}/src/main/java"

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree])

  executionData = fileTree(
      dir: project.projectDir,
      includes: ['**/*.exec', '**/*.ec']
  )

  reports {
    xml.enabled = true
    xml.destination = "${buildDir}/jacocoTestReport.xml"
    html.enabled = true
    html.destination = "${buildDir}/reports/jacoco"
    csv.enabled = false
  }
}

dependencies {
  testCompile libraries.junit
  testCompile libraries.robolectric
  testCompile libraries.assertJ
  testCompile libraries.equalsVerifier
  testCompile libraries.mockitoCore

  androidTestCompile libraries.supportTestRunner
  androidTestCompile libraries.supportTestRules
  androidTestCompile libraries.espressoCore
  androidTestCompile libraries.espressoContrib
}

apply from: rootProject.file('gradle/gradle-maven-push.gradle')
