// Somehow jacoco doesn't want to work with Robolectric 3.0, Gradle 2.13.
// This is a workaround from:
// https://github.com/mkjensen/danish-media-license/blob/5d9eb52a0d07790b132fb0a6818aa78a5bbbfed1/config/jacoco.gradle
// And a merge from:
// From https://github.com/mgouline/android-samples/blob/master/jacoco/jacoco.gradle
// and https://github.com/pushtorefresh/storio/blob/master/gradle/jacoco-android.gradle
configurations {
  jacoco
}

dependencies {
  jacoco 'org.jacoco:org.jacoco.agent:0.7.2.201409121644'
}

project.afterEvaluate {
  unzipJacocoAgent.onlyIf { false }

  transformClassesWithJacocoForDebug.dependsOn extractJacocoAgent

  testDebugUnitTest.jvmArgs "-javaagent:${project.buildDir}/intermediates/jacoco/jacocoagent.jar=append=true,destfile=${project.buildDir}/outputs/code-coverage/connected/coverage.ec"
  testDebugUnitTest.mustRunAfter connectedDebugAndroidTest

  // Grab all build types and product flavors
  def buildTypes = android.buildTypes.collect { type -> type.name }
  def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

  // When no product flavors defined, use empty
  if (!productFlavors) productFlavors.add('')

  productFlavors.each { productFlavorName ->
    buildTypes.each { buildTypeName ->
      def sourceName, sourcePath
      if (!productFlavorName) {
        sourceName = sourcePath = "${buildTypeName}"
      } else {
        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
        sourcePath = "${productFlavorName}/${buildTypeName}"
      }
      def testTaskName = "test${sourceName.capitalize()}UnitTest"

      // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
      task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                       '**/*Module.*', // Modules for Dagger.
                       '**/*Dagger*.*', // Dagger auto-generated code.
                       '**/*MembersInjector*.*', // Dagger auto-generated code.
                       '**/*_Provide*Factory*.*'] // Dagger auto-generated code.
        )

        def coverageSourceDirs = [
            "src/main/java",
            "src/$productFlavorName/java",
            "src/$buildTypeName/java"
        ]
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

        reports {
          xml.enabled = true
          html.enabled = true
        }
      }
    }
  }
}

task extractJacocoAgent(type: Copy) {
  from {
    configurations.jacoco.collect { zipTree(it) }
  }
  into "${project.buildDir}/intermediates/jacoco"
}
